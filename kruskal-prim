#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "header.h"

/// fonction pour lire un graphe à partir d'un fichier texte
Arete* lireGrapheFichier(const char* nomFichier, int* nbSommets, int* nbAretes) {
    FILE* fichier = fopen(nomFichier, "r");


    /// lire le nombre de sommets et d'arêtes
    fscanf(fichier, "%d %d", nbSommets, nbAretes);
    Arete* aretes = (Arete*)malloc(*nbAretes * sizeof(Arete));

    /// lire les arêtes
    for (int i = 0; i < *nbAretes; i++) {
        fscanf(fichier, "%d %d %d", &aretes[i].sommet1, &aretes[i].sommet2, &aretes[i].poids);
    }

    fclose(fichier);
    return aretes;
}

/// fonction pour trouver l'ensemble d'un sommet
int trouverEnsemble(SousEnsemble sousEnsembles[], int sommet) {
    if (sousEnsembles[sommet].parent != sommet) {
        sousEnsembles[sommet].parent = trouverEnsemble(sousEnsembles, sousEnsembles[sommet].parent);
    }
    return sousEnsembles[sommet].parent;
}

/// fonction pour unir deux ensembles
void unirEnsembles(SousEnsemble sousEnsembles[], int ensemble1, int ensemble2) {
    int racine1 = trouverEnsemble(sousEnsembles, ensemble1);
    int racine2 = trouverEnsemble(sousEnsembles, ensemble2);

    if (sousEnsembles[racine1].rang < sousEnsembles[racine2].rang) {
        sousEnsembles[racine1].parent = racine2;
    } else if (sousEnsembles[racine1].rang > sousEnsembles[racine2].rang) {
        sousEnsembles[racine2].parent = racine1;
    } else {
        sousEnsembles[racine2].parent = racine1;
        sousEnsembles[racine1].rang++;
    }
}

/// fonction pour comparer les arêtes par poids
int comparerAretes(const void* a, const void* b) {
    Arete* areteA = (Arete*)a;
    Arete* areteB = (Arete*)b;
    return areteA->poids - areteB->poids;
}

/// algorithme de Kruskal
void kruskalArbre(Arete* aretes, int nbSommets, int nbAretes) {
    /// tri des arêtes par poids croissant
    qsort(aretes, nbAretes, sizeof(Arete), comparerAretes);

    SousEnsemble* sousEnsembles = (SousEnsemble*)malloc(nbSommets * sizeof(SousEnsemble));
    for (int i = 0; i < nbSommets; i++) {
        sousEnsembles[i].parent = i;
        sousEnsembles[i].rang = 0;
    }

    Arete* resultat = (Arete*)malloc((nbSommets - 1) * sizeof(Arete));
    int nbAretesArbre = 0;
    int indexArete = 0;

    while (nbAretesArbre < nbSommets - 1 && indexArete < nbAretes) {
        Arete prochaineArete = aretes[indexArete++];

        int ensemble1 = trouverEnsemble(sousEnsembles, prochaineArete.sommet1);
        int ensemble2 = trouverEnsemble(sousEnsembles, prochaineArete.sommet2);

        if (ensemble1 != ensemble2) {
            resultat[nbAretesArbre++] = prochaineArete;
            unirEnsembles(sousEnsembles, ensemble1, ensemble2);
        }
    }

    printf("Arbre couvrant minimum (Kruskal) :\n");
    int poidsTotal = 0;
    for (int i = 0; i < nbAretesArbre; i++) {
        printf("Sommet %d -- Sommet %d : Poids %d\n", resultat[i].sommet1, resultat[i].sommet2, resultat[i].poids);
        poidsTotal += resultat[i].poids;
    }
    printf("Poids total de l'arbre : %d\n", poidsTotal+1);

    free(sousEnsembles);
    free(resultat);
}

/// algorithme de Prim
void primArbre(int** graphe, int nbSommets) {
    int parent[nbSommets];
    int key[nbSommets];
    int ArbreSet[nbSommets];

    for (int i = 0; i < nbSommets; i++) {
        key[i] = INT_MAX;
        ArbreSet[i] = 0;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < nbSommets - 1; count++) {
        int min = INT_MAX, u;

        for (int v = 0; v < nbSommets; v++) {
            if (ArbreSet[v] == 0 && key[v] < min) {
                min = key[v], u = v;
            }
        }

        ArbreSet[u] = 1;

        for (int v = 0; v < nbSommets; v++) {
            if (graphe[u][v] && ArbreSet[v] == 0 && graphe[u][v] < key[v]) {
                parent[v] = u, key[v] = graphe[u][v];
            }
        }
    }

    printf("Arbre couvrant minimum (Prim) :\n");
    int poidsTotal = 0;
    for (int i = 1; i < nbSommets; i++) {
        printf("Sommet %d -- Sommet %d : Poids %d\n", parent[i], i, graphe[i][parent[i]]);
        poidsTotal += graphe[i][parent[i]];
    }
    printf("Poids total de l'arbre : %d\n", poidsTotal+1);
}

int main() {
    int nbSommets, nbAretes, choix;
    const char* nomFichier = "graphe.txt";

    printf("Choisissez l'algorithme :\n0. Kruskal\n1. Prim\n");
    scanf("%d", &choix);

    if (choix == 0) {
        Arete* aretes = lireGrapheFichier(nomFichier, &nbSommets, &nbAretes);

        kruskalArbre(aretes, nbSommets, nbAretes);
        free(aretes);
    } else if (choix == 1) {
        FILE* fichier = fopen(nomFichier, "r");
        fscanf(fichier, "%d %d", &nbSommets, &nbAretes);
        int** graphe = (int**)malloc(nbSommets * sizeof(int*));
        for (int i = 0; i < nbSommets; i++) {
            graphe[i] = (int*)malloc(nbSommets * sizeof(int));
            for (int j = 0; j < nbSommets; j++) {
                graphe[i][j] = 0;
            }
        }

        for (int i = 0; i < nbAretes; i++) {
            int u, v, poids;
            fscanf(fichier, "%d %d %d", &u, &v, &poids);
            graphe[u][v] = poids;
            graphe[v][u] = poids;
        }

        fclose(fichier);
        primArbre(graphe, nbSommets);

        for (int i = 0; i < nbSommets; i++) {
            free(graphe[i]);
        }
        free(graphe);
    } else {
        printf("Choix invalide.\n");
    }

    return 0;
}
